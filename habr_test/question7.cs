private delegate void SomeMethod();
        static void Main()
        {
            var list = new List<SomeMethod>();
            for (var i = 0; i < 3; i++)
            {
                list.Add(() => Console.WriteLine(i));
            }

            foreach (var del in list)
            {
                del();
            }
        }
        
// 3 3 3
// 78.2%
// Для доступа к значению переменной i в момент вызова делегата C# использует так называемые замыкания.
// В C# замыкания реализованы как генерируемый компилятором класс, 
// в поля которого сохраняются все переменные, к которым идет обращение из лямбда-выражения.
// Для нашего случая компилятор создает в классе поле, которое обновляется в каждой итерации цикла 
// (включая последнюю операцию "i++", после которой цикл завершается). 
// Далее все делегаты обращаются к одной и той же переменной со значением.
